# *****************************************************************************
#
#  Title:       SwaggerFile.yaml
# 
#  Description: Describes "Harmony Core Sample API" to Swagger UI
# 
# *****************************************************************************
#  WARNING: GENERATED CODE!
#  This file was generated by CodeGen. Avoid editing the file if possible.
#  Any changes you make will be lost of the file is re-generated.
# *****************************************************************************
# 
swagger: '2.0'

info:
  description: This environment presents an example of using Harmony Core to expose a collection of RESTful Web Service endpoints that allow you to interact with a small sample dataset.
  version: 1
  title: Harmony Core Sample API

host: 'localhost:8086'
basePath: /odata

schemes:
  - https

consumes:
  - application/json

produces:
  - application/json

tags:
  - name: Bbqs
    description: Operations related to BBQ Table

  - name: Orders
    description: Operations related to Order Table

  - name: Users
    description: Operations related to User table

  - name: Favorites
    description: Operations related to Favorites Table


paths:

  /Bbqs:

    get:
      summary: Get all bbqs
      description: Get all or a filtered collection of bbqs.
      operationId: GetBbqs
      deprecated: false
      tags:
        - Bbqs
      parameters:
        - name: $expand
          in: query
          description: Expand one or more navigation properties.
          type: string
        - name: $select
          in: query
          description: List of properties to be returned.
          type: string
        - name: $filter
          in: query
          description: Filter expression to restrict returned rows.
          type: string
        - name: $orderby
          in: query
          description: Order by some property
          type: string
        - name: $top
          in: query
          description: Maximum number of rows to return.
          type: integer
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: 'BbqTypes.yaml#/Bbq'

    post:
      summary: Create a bbq
      description: Create a new bbq. When using a POST operation the primary key value will be assigned automatically. The primary key properties can be ommitted from the data in the request body, but if present will be ignored and replaced by automatically generated values.
      operationId: PostBbq
      deprecated: false
      tags:
        - Bbqs
      parameters:
        - name: aBbq
          in: body
          description: Data for bbq to create.
          required: true
          schema:
            $ref: 'BbqTypes.yaml#/BbqPost'
      responses:
        '201':
          description: The bbq was created. The data for the new bbq will be included in the response body, including the auotmatically assigned primary key values, and the response will include a "Location" header indicating the URL that can be used to retrieve the newly created bbq.
          schema:
            $ref: 'BbqTypes.yaml#/Bbq'
        '400':
          description: Bad request

  /Bbqs/$count:

    get:
      summary: Count bbqs
      description: Count all or a filtered collection of bbqs.
      operationId: CountBbqs
      deprecated: false
      tags:
        - Bbqs
      parameters:
        - name: $filter
          in: query
          description: Filter expression to restrict returned rows.
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: integer

  '/Bbqs(Id={aId})':

    get:
      summary: Get a single bbq
      description: Get a bbq via a complete primary key.
      operationId: GetBbq
      deprecated: false
      tags:
        - Bbqs
      parameters:
        - name: aId
          in: path
          description: ID of BBQ
          required: true
          type: integer
        - name: $expand
          in: query
          description: Expand one or more navigation properties.
          type: string
        - name: $select
          in: query
          description: List of properties to be returned.
          type: string
      responses:
        '200':
          description: OK (the requested bbq was found and returned)
          schema:
            $ref: 'BbqTypes.yaml#/Bbq'
        '404':
          description: Not found (the requested bbq was not found)

    delete:
      summary: Delete bbq
      description: Delete a bbq via a complete primary key.
      operationId: DeleteBbq
      deprecated: false
      tags:
        - Bbqs
      parameters:
        - name: aId
          in: path
          description: ID of BBQ
          required: true
          type: integer
      responses:
        '204':
          description: No content (the specified bbq was deleted)
        '404':
          description: Not found content (the specified bbq was not found)

    put:
      summary: Create or update bbq
      description: Create or update a bbq via a complete primary key.
      operationId: CreateOrUpdateBbq
      deprecated: false
      tags:
        - Bbqs
      parameters:
        - name: aId
          in: path
          description: ID of BBQ
          required: true
          type: integer
        - name: aBbq
          in: body
          description: Data for bbq to create or update.
          required: true
          schema:
            $ref: 'BbqTypes.yaml#/Bbq'
      responses:
        '201':
          description: Created (the bbq was created)
          schema:
            $ref: 'BbqTypes.yaml#/Bbq'
        '204':
          description: No Content (the bbq was updated)
        '400':
          description: Bad request

    patch:
      summary: Patch bbq
      description: Patch a bbq via complete primary key.
      operationId: PatchBbq
      deprecated: false
      tags:
        - Bbqs
      parameters:
        - name: aId
          in: path
          description: ID of BBQ
          required: true
          type: integer
        - name: aPatchDocument
          in: body
          description: JSON patch document describing the changes to make to the bbq.
          required: true
          schema:
            $ref: '#/definitions/PatchRequest'
      responses:
        '204':
          description: No content (the specified bbq was patched)
        '400':
          description: Bad request
        '404':
          description: Not found (the specified bbq was not found)

  /Orders:

    get:
      summary: Get all orders
      description: Get all or a filtered collection of orders.
      operationId: GetOrders
      deprecated: false
      tags:
        - Orders
      parameters:
        - name: $expand
          in: query
          description: Expand one or more navigation properties.
          type: string
        - name: $select
          in: query
          description: List of properties to be returned.
          type: string
        - name: $filter
          in: query
          description: Filter expression to restrict returned rows.
          type: string
        - name: $orderby
          in: query
          description: Order by some property
          type: string
        - name: $top
          in: query
          description: Maximum number of rows to return.
          type: integer
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: 'OrderTypes.yaml#/Order'

    post:
      summary: Create a order
      description: Create a new order. When using a POST operation the primary key value will be assigned automatically. The primary key properties can be ommitted from the data in the request body, but if present will be ignored and replaced by automatically generated values.
      operationId: PostOrder
      deprecated: false
      tags:
        - Orders
      parameters:
        - name: aOrder
          in: body
          description: Data for order to create.
          required: true
          schema:
            $ref: 'OrderTypes.yaml#/OrderPost'
      responses:
        '201':
          description: The order was created. The data for the new order will be included in the response body, including the auotmatically assigned primary key values, and the response will include a "Location" header indicating the URL that can be used to retrieve the newly created order.
          schema:
            $ref: 'OrderTypes.yaml#/Order'
        '400':
          description: Bad request

  /Orders/$count:

    get:
      summary: Count orders
      description: Count all or a filtered collection of orders.
      operationId: CountOrders
      deprecated: false
      tags:
        - Orders
      parameters:
        - name: $filter
          in: query
          description: Filter expression to restrict returned rows.
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: integer

  '/Orders(Id={aId})':

    get:
      summary: Get a single order
      description: Get a order via a complete primary key.
      operationId: GetOrder
      deprecated: false
      tags:
        - Orders
      parameters:
        - name: aId
          in: path
          description: ID of order
          required: true
          type: integer
        - name: $expand
          in: query
          description: Expand one or more navigation properties.
          type: string
        - name: $select
          in: query
          description: List of properties to be returned.
          type: string
      responses:
        '200':
          description: OK (the requested order was found and returned)
          schema:
            $ref: 'OrderTypes.yaml#/Order'
        '404':
          description: Not found (the requested order was not found)

    delete:
      summary: Delete order
      description: Delete a order via a complete primary key.
      operationId: DeleteOrder
      deprecated: false
      tags:
        - Orders
      parameters:
        - name: aId
          in: path
          description: ID of order
          required: true
          type: integer
      responses:
        '204':
          description: No content (the specified order was deleted)
        '404':
          description: Not found content (the specified order was not found)

    put:
      summary: Create or update order
      description: Create or update a order via a complete primary key.
      operationId: CreateOrUpdateOrder
      deprecated: false
      tags:
        - Orders
      parameters:
        - name: aId
          in: path
          description: ID of order
          required: true
          type: integer
        - name: aOrder
          in: body
          description: Data for order to create or update.
          required: true
          schema:
            $ref: 'OrderTypes.yaml#/Order'
      responses:
        '201':
          description: Created (the order was created)
          schema:
            $ref: 'OrderTypes.yaml#/Order'
        '204':
          description: No Content (the order was updated)
        '400':
          description: Bad request

    patch:
      summary: Patch order
      description: Patch a order via complete primary key.
      operationId: PatchOrder
      deprecated: false
      tags:
        - Orders
      parameters:
        - name: aId
          in: path
          description: ID of order
          required: true
          type: integer
        - name: aPatchDocument
          in: body
          description: JSON patch document describing the changes to make to the order.
          required: true
          schema:
            $ref: '#/definitions/PatchRequest'
      responses:
        '204':
          description: No content (the specified order was patched)
        '400':
          description: Bad request
        '404':
          description: Not found (the specified order was not found)

  /Users:

    get:
      summary: Get all users
      description: Get all or a filtered collection of users.
      operationId: GetUsers
      deprecated: false
      tags:
        - Users
      parameters:
        - name: $expand
          in: query
          description: Expand one or more navigation properties.
          type: string
        - name: $select
          in: query
          description: List of properties to be returned.
          type: string
        - name: $filter
          in: query
          description: Filter expression to restrict returned rows.
          type: string
        - name: $orderby
          in: query
          description: Order by some property
          type: string
        - name: $top
          in: query
          description: Maximum number of rows to return.
          type: integer
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: 'UserTypes.yaml#/User'

    post:
      summary: Create a user
      description: Create a new user. When using a POST operation the primary key value will be assigned automatically. The primary key properties can be ommitted from the data in the request body, but if present will be ignored and replaced by automatically generated values.
      operationId: PostUser
      deprecated: false
      tags:
        - Users
      parameters:
        - name: aUser
          in: body
          description: Data for user to create.
          required: true
          schema:
            $ref: 'UserTypes.yaml#/UserPost'
      responses:
        '201':
          description: The user was created. The data for the new user will be included in the response body, including the auotmatically assigned primary key values, and the response will include a "Location" header indicating the URL that can be used to retrieve the newly created user.
          schema:
            $ref: 'UserTypes.yaml#/User'
        '400':
          description: Bad request

  /Users/$count:

    get:
      summary: Count users
      description: Count all or a filtered collection of users.
      operationId: CountUsers
      deprecated: false
      tags:
        - Users
      parameters:
        - name: $filter
          in: query
          description: Filter expression to restrict returned rows.
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: integer

  '/Users(Id={aId})':

    get:
      summary: Get a single user
      description: Get a user via a complete primary key.
      operationId: GetUser
      deprecated: false
      tags:
        - Users
      parameters:
        - name: aId
          in: path
          description: ID of user
          required: true
          type: integer
        - name: $expand
          in: query
          description: Expand one or more navigation properties.
          type: string
        - name: $select
          in: query
          description: List of properties to be returned.
          type: string
      responses:
        '200':
          description: OK (the requested user was found and returned)
          schema:
            $ref: 'UserTypes.yaml#/User'
        '404':
          description: Not found (the requested user was not found)

    delete:
      summary: Delete user
      description: Delete a user via a complete primary key.
      operationId: DeleteUser
      deprecated: false
      tags:
        - Users
      parameters:
        - name: aId
          in: path
          description: ID of user
          required: true
          type: integer
      responses:
        '204':
          description: No content (the specified user was deleted)
        '404':
          description: Not found content (the specified user was not found)

    put:
      summary: Create or update user
      description: Create or update a user via a complete primary key.
      operationId: CreateOrUpdateUser
      deprecated: false
      tags:
        - Users
      parameters:
        - name: aId
          in: path
          description: ID of user
          required: true
          type: integer
        - name: aUser
          in: body
          description: Data for user to create or update.
          required: true
          schema:
            $ref: 'UserTypes.yaml#/User'
      responses:
        '201':
          description: Created (the user was created)
          schema:
            $ref: 'UserTypes.yaml#/User'
        '204':
          description: No Content (the user was updated)
        '400':
          description: Bad request

    patch:
      summary: Patch user
      description: Patch a user via complete primary key.
      operationId: PatchUser
      deprecated: false
      tags:
        - Users
      parameters:
        - name: aId
          in: path
          description: ID of user
          required: true
          type: integer
        - name: aPatchDocument
          in: body
          description: JSON patch document describing the changes to make to the user.
          required: true
          schema:
            $ref: '#/definitions/PatchRequest'
      responses:
        '204':
          description: No content (the specified user was patched)
        '400':
          description: Bad request
        '404':
          description: Not found (the specified user was not found)

  /Favorites:

    get:
      summary: Get all favorites
      description: Get all or a filtered collection of favorites.
      operationId: GetFavorites
      deprecated: false
      tags:
        - Favorites
      parameters:
        - name: $expand
          in: query
          description: Expand one or more navigation properties.
          type: string
        - name: $select
          in: query
          description: List of properties to be returned.
          type: string
        - name: $filter
          in: query
          description: Filter expression to restrict returned rows.
          type: string
        - name: $orderby
          in: query
          description: Order by some property
          type: string
        - name: $top
          in: query
          description: Maximum number of rows to return.
          type: integer
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: 'FavoriteTypes.yaml#/Favorite'

    post:
      summary: Create a favorite
      description: Create a new favorite. When using a POST operation the primary key value will be assigned automatically. The primary key properties can be ommitted from the data in the request body, but if present will be ignored and replaced by automatically generated values.
      operationId: PostFavorite
      deprecated: false
      tags:
        - Favorites
      parameters:
        - name: aFavorite
          in: body
          description: Data for favorite to create.
          required: true
          schema:
            $ref: 'FavoriteTypes.yaml#/FavoritePost'
      responses:
        '201':
          description: The favorite was created. The data for the new favorite will be included in the response body, including the auotmatically assigned primary key values, and the response will include a "Location" header indicating the URL that can be used to retrieve the newly created favorite.
          schema:
            $ref: 'FavoriteTypes.yaml#/Favorite'
        '400':
          description: Bad request

  /Favorites/$count:

    get:
      summary: Count favorites
      description: Count all or a filtered collection of favorites.
      operationId: CountFavorites
      deprecated: false
      tags:
        - Favorites
      parameters:
        - name: $filter
          in: query
          description: Filter expression to restrict returned rows.
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: integer

  '/Favorites(Id={aId})':

    get:
      summary: Get a single favorite
      description: Get a favorite via a complete primary key.
      operationId: GetFavorite
      deprecated: false
      tags:
        - Favorites
      parameters:
        - name: aId
          in: path
          description: ID of favorite
          required: true
          type: integer
        - name: $expand
          in: query
          description: Expand one or more navigation properties.
          type: string
        - name: $select
          in: query
          description: List of properties to be returned.
          type: string
      responses:
        '200':
          description: OK (the requested favorite was found and returned)
          schema:
            $ref: 'FavoriteTypes.yaml#/Favorite'
        '404':
          description: Not found (the requested favorite was not found)

    delete:
      summary: Delete favorite
      description: Delete a favorite via a complete primary key.
      operationId: DeleteFavorite
      deprecated: false
      tags:
        - Favorites
      parameters:
        - name: aId
          in: path
          description: ID of favorite
          required: true
          type: integer
      responses:
        '204':
          description: No content (the specified favorite was deleted)
        '404':
          description: Not found content (the specified favorite was not found)

    put:
      summary: Create or update favorite
      description: Create or update a favorite via a complete primary key.
      operationId: CreateOrUpdateFavorite
      deprecated: false
      tags:
        - Favorites
      parameters:
        - name: aId
          in: path
          description: ID of favorite
          required: true
          type: integer
        - name: aFavorite
          in: body
          description: Data for favorite to create or update.
          required: true
          schema:
            $ref: 'FavoriteTypes.yaml#/Favorite'
      responses:
        '201':
          description: Created (the favorite was created)
          schema:
            $ref: 'FavoriteTypes.yaml#/Favorite'
        '204':
          description: No Content (the favorite was updated)
        '400':
          description: Bad request

    patch:
      summary: Patch favorite
      description: Patch a favorite via complete primary key.
      operationId: PatchFavorite
      deprecated: false
      tags:
        - Favorites
      parameters:
        - name: aId
          in: path
          description: ID of favorite
          required: true
          type: integer
        - name: aPatchDocument
          in: body
          description: JSON patch document describing the changes to make to the favorite.
          required: true
          schema:
            $ref: '#/definitions/PatchRequest'
      responses:
        '204':
          description: No content (the specified favorite was patched)
        '400':
          description: Bad request
        '404':
          description: Not found (the specified favorite was not found)
definitions:
  PatchRequest:
    type: array
    items:
      $ref: '#/definitions/PatchDocument'
  PatchDocument:
    description: A JSONPatch document as defined by RFC 6902
    required:
      - op
      - path
    properties:
      op:
        type: string
        description: The operation to be performed
        enum:
          - add
          - remove
          - replace
          - move
          - copy
          - test
      path:
        type: string
        description: A JSON-Pointer
      value:
        type: object
        description: The value to be used within the operations.
      from:
        type: string
        description: A string containing a JSON Pointer value.