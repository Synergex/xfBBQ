;;*****************************************************************************
;;
;; Title:       PotluckWishlist.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure POTLUCK_WISHLIST and from the data file DAT:POTLUCK_WISHLIST.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection

namespace Services.Models

    public partial class PotluckWishlist extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strPotluckWishlist
        private mOriginalSynergyData, strPotluckWishlist

        private static sMetadata, @PotluckWishlistMetadata

.region "Constructors"

        static method PotluckWishlist
        proc
            sMetadata = new PotluckWishlistMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(PotluckWishlist), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method PotluckWishlist
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method PotluckWishlist
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; Item id
        ;;; </summary>
        {Key}
        {Range(0,99999999, ErrorMessage="Item id must be between 0 and 99999999. ")}
        public property Id, int
            method get
            proc
                mreturn (int)mSynergyData.id
            endmethod
            method set
            proc
                mSynergyData.id = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; BBQ id
        ;;; </summary>
        {Range(0,99999999, ErrorMessage="BBQ id must be between 0 and 99999999. ")}
        public property Bbqid, int
            method get
            proc
                mreturn (int)mSynergyData.bbqid
            endmethod
            method set
            proc
                mSynergyData.bbqid = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Item id
        ;;; </summary>
        {Range(0,99999999, ErrorMessage="Item id must be between 0 and 99999999. ")}
        public property Itemid, int
            method get
            proc
                mreturn (int)mSynergyData.itemid
            endmethod
            method set
            proc
                mSynergyData.itemid = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Quantity
        ;;; </summary>
        {Range(0,9999, ErrorMessage="Quantity must be between 0 and 9999. ")}
        public property Qty, int
            method get
            proc
                mreturn (int)mSynergyData.qty
            endmethod
            method set
            proc
                mSynergyData.qty = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Custom item (not on original wishlist)
        ;;; </summary>
        {Range(0,9, ErrorMessage="Custom item (not on original wishlist) must be between 0 and 9. ")}
        public property CustomItem, int
            method get
            proc
                mreturn (int)mSynergyData.custom_item
            endmethod
            method set
            proc
                mSynergyData.custom_item = value
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
        proc
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[5]
        endmethod

.endregion

.region "Relationships to other entities"

        ;;; <summary>
        ;;; Relationship (Type C)
        ;;; POTLUCK_WISHLIST.BBQID (one) --> (one) BBQ.ID
        ;;; </summary>
        public readwrite property REL_Bbq, @Bbq

        ;;; <summary>
        ;;; Relationship (Type C)
        ;;; POTLUCK_WISHLIST.ITEMID (one) --> (one) POTLUCK_ITEM.ID
        ;;; </summary>
        public readwrite property REL_PotluckItem, @PotluckItem

        ;;; <summary>
        ;;; Relationship (Type E)
        ;;; POTLUCK_WISHLIST.ITEMID (one) --> (many) POTLUCK_FULFILLMENT.ITEMID
        ;;; </summary>
        public readwrite property REL_PotluckFulfillments, @ICollection<PotluckFulfillment>

.endregion

.region "Relation validation"

        ;;; <summary>
        ;;; Validate data
        ;;; </summary>
        ;;; <param name="type">Validation type (create, update or delete)</param>
        ;;; <param name="sp">Serices provider</param>
        public override method Validate, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        proc
            ;;If we have a ValidateCustom method, call it
            ValidateCustom(vType,sp)
        endmethod

        private partial method ValidateCustom, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        endmethod

.endregion

.region "Properties to represent keys"

        ;;Access keys

        private _KEY_ID, string, ""
        public readonly property KEY_ID, string, ""

        private _KEY_BBQID, string, ""
        public readonly property KEY_BBQID, string, ""

        ;;Foreign keys

        private _KEY_ITEMID, string, ""
        public readonly property KEY_ITEMID, string, ""

.endregion

    endclass

endnamespace
