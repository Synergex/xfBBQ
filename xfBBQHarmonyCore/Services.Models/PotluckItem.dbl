;;*****************************************************************************
;;
;; Title:       PotluckItem.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure POTLUCK_ITEMS and from the data file DAT:POTLUCK_ITEMS.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection

namespace Services.Models

    public partial class PotluckItem extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strPotluckItem
        private mOriginalSynergyData, strPotluckItem

        private static sMetadata, @PotluckItemMetadata

.region "Constructors"

        static method PotluckItem
        proc
            sMetadata = new PotluckItemMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(PotluckItem), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method PotluckItem
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method PotluckItem
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; Potluck Item id
        ;;; </summary>
        {Key}
        {Range(0,99999999, ErrorMessage="Potluck Item id must be between 0 and 99999999. ")}
        public property Id, int
            method get
            proc
                mreturn (int)mSynergyData.id
            endmethod
            method set
            proc
                mSynergyData.id = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Description
        ;;; </summary>
        {StringLength(200, ErrorMessage="Description cannot exceed 200 characters. ")}
        public property Description, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.description, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.description = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Icon/image URL
        ;;; </summary>
        {StringLength(256, ErrorMessage="Icon/image URL cannot exceed 256 characters. ")}
        public property Icon, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.icon, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.icon = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
        proc
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[3]
        endmethod

.endregion

.region "Properties to represent keys"

        ;;Access keys

        private _KEY_ID, string, ""
        public readonly property KEY_ID, string, ""

.endregion

    endclass

endnamespace
