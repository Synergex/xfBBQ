;;*****************************************************************************
;;
;; Title:       TraditionalBridgeService.dbl
;;
;; Description: Exposes example traditional Synergy routines via Traditional
;;              Bridge JSON-RPC calls.
;;
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Harmony.Core.Interface
import Harmony.Core.EF.Extensions
import Harmony.OData
import Harmony.OData.Adapter
import System.Threading.Tasks
import System
import System.Collections.Generic
import System.Text
import Services
import Services.Models
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNetCore.Authorization
import Newtonsoft.Json.Linq
import System.Linq

import Services.Controllers
import Services.Models

namespace Services.Controllers

    public partial class TraditionalBridgeService extends DynamicCallProvider

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        public method TraditionalBridgeService
            connection, @IDynamicCallConnection
            endparams
            parent(connection)
        proc
            
        endmethod

        ;;; <summary>
        ;;; Add two numbers together
        ;;; </summary>
        ;;; <param name="aLogicalName">Logical name to retrieve</param>
        ;;; <returns>The value of the logical name, or an empty string if the logical name does not exist</returns>
        public async method AddTwoNumbers, @Task<decimal>
            required in aNumber1, decimal
            required in aNumber2, decimal
        proc
            data sum, decimal
            data resultTuple = await CallMethod("AddTwoNumbers",aNumber1,aNumber2,sum)
            ;;Item1 in the returned Tuple is the returen value (none in this case, we're calling a subroutine)
            ;;Item2 in the returned Tuple is an array of returned parameters
            data returnToken = (decimal)(resultTuple.Item2[3])
            mreturn returnToken
        endmethod

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method GetEnvironment, @Task<string>
        proc
            data resultTuple = await CallMethod("GetEnvironment")
            ;Item1 in the returned Tuple is the return value, a string in this case
            data returnToken = (string)(resultTuple.Item1)
            mreturn returnToken
        endmethod

        ;;; <summary>
        ;;; Get the value of a logical name in the Traditional Synergy environment
        ;;; </summary>
        ;;; <param name="aLogicalName">Logical name to retrieve</param>
        ;;; <returns>The value of the logical name, or an empty string if the logical name does not exist</returns>
        public async method GetLogicalName, @Task<string>
            required in aLogicalName, string
        proc
            data resultTuple = await CallMethod("GetLogicalName",aLogicalName)
            ;Item1 in the returned Tuple is the return value, a string in this case
            data returnToken = (string)(resultTuple.Item1)
            mreturn returnToken
        endmethod

    endclass

endnamespace
