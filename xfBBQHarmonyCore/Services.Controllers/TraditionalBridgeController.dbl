;;*****************************************************************************
;;
;; Title:       TraditionalBridgeController.dbl
;;
;; Description: WebAPI controller to expose example Traditional Bridge Routines
;;
;;*****************************************************************************

import Microsoft.AspNetCore.Authorization
import Microsoft.AspNetCore.Mvc
import Microsoft.Extensions.Configuration
import Microsoft.Extensions.Options
import Newtonsoft.Json
import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks

import Services.Controllers
import Services.Models

namespace Services.Controllers

    {Route("TraditionalBridge")}
    public partial class TraditionalBridgeController extends ControllerBase

        ;;Services provided via dependency injection
        private _TraditionalBridgeService, @TraditionalBridgeService
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        ;;; <param name="aRadleyService">RadleyService instance provided via dependency injection</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method TraditionalBridgeController
            aTraditionalBridgeService, @TraditionalBridgeService
            aAppSettings, @IOptions<AppSettings>
        proc
            _TraditionalBridgeService = aTraditionalBridgeService
            _AppSettings = aAppSettings
        endmethod

        {AllowAnonymous}
        {Route("AddTwoNumbers/{aNumber1}/{aNumber2}")}
        ;;; <summary>
        ;;; Adds two numbers and returns the sum
        ;;; </summary>
        ;;; <param name="aLogicalName">Logical name to retrieve</param>
        ;;; <returns>The value of the logical name, or an empty string if the logical name does not exist</returns>
        public async method GetAddTwoNumbers, @Task<IActionResult>
            required in aNumber1, decimal
            required in aNumber2, decimal
        proc
            mreturn ok(await _TraditionalBridgeService.AddTwoNumbers(aNumber1,aNumber2))
        endmethod

        {AllowAnonymous}
        {Route("GetEnvironment")}
        ;;; <summary>
        ;;; Get the current environment data setting
        ;;; </summary>
        ;;; <returns></returns>
        public async method GetEnvironment, @Task<IActionResult>
        proc
            mreturn ok(await _TraditionalBridgeService.GetEnvironment())
        endmethod

        {AllowAnonymous}
        {Route("GetLogicalName/{aLogicalName}")}
        ;;; <summary>
        ;;; Get the value of a logical name in the Traditional Synergy environment
        ;;; </summary>
        ;;; <param name="aLogicalName">Logical name to retrieve</param>
        ;;; <returns>The value of the logical name, or an empty string if the logical name does not exist</returns>
        public async method GetLogicalName, @Task<IActionResult>
            required in aLogicalName, string
        proc
            mreturn ok(await _TraditionalBridgeService.GetLogicalName(aLogicalName))
        endmethod

    endclass

endnamespace
