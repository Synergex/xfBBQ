;;*****************************************************************************
;;
;; Title:       PotluckFulfillmentsController.dbl
;;
;; Description: OData controller for the POTLUCK_FULFILLMENT structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Authorization
import Microsoft.AspNetCore.Http
import Microsoft.OData
import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Harmony.AspNetCore
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    {Authorize}
    {ApiVersion("1")}
    {ODataRoutePrefix("PotluckFulfillments")}
    ;;; <summary>
    ;;; OData controller for PotluckFulfillments
    ;;; </summary>
    public partial class PotluckFulfillmentsController extends ODataController
    
        ;;Services provided via dependency injection
        private _DbContext, @Services.Models.DBContext
        private _ServiceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructs a new instance of PotluckFulfillmentsController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method PotluckFulfillmentsController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            this._DbContext = aDbContext
            this._ServiceProvider = aServiceProvider
            this._AppSettings = aAppSettings
        endmethod

        {ODataRoute}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<PotluckFulfillment>>),StatusCodes.Status200OK)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get all PotluckFulfillments
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetPotluckFulfillments, @IActionResult
        proc
            mreturn Ok(_DbContext.PotluckFulfillments.AsNoTracking())
        endmethod

        {ODataRoute("(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(PotluckFulfillment),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get a single PotluckFulfillment by primary key.
        ;;; </summary>
        ;;; <param name="aId">Item id</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetPotluckFulfillment, @SingleResult<PotluckFulfillment>
            {FromODataUri}
            required in aId, int
        proc
            mreturn new SingleResult<PotluckFulfillment>(_DbContext.PotluckFulfillments.AsNoTracking().FindQuery<PotluckFulfillment>(_DbContext, aId))
        endmethod

        {ODataRoute("(Bbqid={aBbqid},Itemid={aItemid})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<PotluckFulfillment>>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get potluckFulfillments by alternate key key Bbqid.
        ;;; </summary>
        ;;; <param name="aBbqid">BBQ id</param>
        ;;; <param name="aItemid">Item id</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetPotluckFulfillmentsByBbqid, @IActionResult
            {FromODataUri}
            required in aBbqid, int
            {FromODataUri}
            required in aItemid, int
        proc
            data result = _DbContext.PotluckFulfillments.AsNoTracking().FindAlternate("Bbqid",aBbqid,"Itemid",aItemid)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("(Userid={aUserid},Bbqid={aBbqid},Itemid={aItemid})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<PotluckFulfillment>>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get potluckFulfillments by alternate key key User.
        ;;; </summary>
        ;;; <param name="aUserid">user id bringing item</param>
        ;;; <param name="aBbqid">BBQ id</param>
        ;;; <param name="aItemid">Item id</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetPotluckFulfillmentsByUser, @IActionResult
            {FromODataUri}
            required in aUserid, int
            {FromODataUri}
            required in aBbqid, int
            {FromODataUri}
            required in aItemid, int
        proc
            data result = _DbContext.PotluckFulfillments.AsNoTracking().FindAlternate("Userid",aUserid,"Bbqid",aBbqid,"Itemid",aItemid)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("(Itemid={aItemid})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<PotluckFulfillment>>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get potluckFulfillments by alternate key key Itemid.
        ;;; </summary>
        ;;; <param name="aItemid">Item id</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetPotluckFulfillmentsByItemid, @IActionResult
            {FromODataUri}
            required in aItemid, int
        proc
            data result = _DbContext.PotluckFulfillments.AsNoTracking().FindAlternate("Itemid",aItemid)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(PotluckFulfillment),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {HttpPost}
        ;;; <summary>
        ;;; Create a new potluckFulfillment (automatically assigned primary key).
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PostPotluckFulfillment, @IActionResult
            {FromBody}
            required in aPotluckFulfillment, @PotluckFulfillment
        proc
            ;;Remove the primary key fields from ModelState
            ModelState.Remove("Id")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Get the next available primary key value
            disposable data keyFactory = (@IPrimaryKeyFactory)_ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            KeyFactory.AssignPrimaryKey(aPotluckFulfillment)

            ;;Add the new potluckFulfillment
            try
            begin
                _DbContext.PotluckFulfillments.Add(aPotluckFulfillment)
                _DbContext.SaveChanges(keyFactory)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn Created(aPotluckFulfillment)

        endmethod

        {ODataRoute("(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status201Created)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpPut}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a potluckFulfillment.
        ;;; </summary>

        ;;; <param name="aId">Item id</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PutPotluckFulfillment, @IActionResult
            {FromODataUri}
            required in aId, int
            {FromBody}
            required in aPotluckFulfillment, @PotluckFulfillment
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aPotluckFulfillment.Id = aId

            try
            begin
                ;;Add and commit
                data existing = _DbContext.PotluckFulfillments.Find(aId)
                if(existing == ^null) then
                begin
                    _DbContext.PotluckFulfillments.Add(aPotluckFulfillment)
                    _DbContext.SaveChanges()
                    mreturn Created(aPotluckFulfillment)
                end
                else
                begin
                    aPotluckFulfillment.CopyTo(existing)
                    _DbContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

        endmethod
        {ODataRoute("(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpPatch}
        ;;; <summary>
        ;;; Patch  (partial update) a potluckFulfillment.
        ;;; </summary>
        ;;; <param name="aId">Item id</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PatchPotluckFulfillment, @IActionResult
            {FromODataUri}
            required in aId, int
            {FromBody}
            required in aPotluckFulfillment, @JsonPatchDocument<PotluckFulfillment>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Patch the existing potluckFulfillment
            try
            begin
                ;;Get the potluckFulfillment to be updated
                data potluckFulfillmentToUpdate = _DbContext.PotluckFulfillments.Find(aId)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(potluckFulfillmentToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the potluckFulfillment we read
                aPotluckFulfillment.ApplyTo(potluckFulfillmentToUpdate, lambda(error) { patchError = error })
                ;;if the patchdoc was bad return the error info
                if(patchError != ^null)
                    mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                ;;Update and commit
                _DbContext.PotluckFulfillments.Update(potluckFulfillmentToUpdate)
                _DbContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn NoContent()

        endmethod
        {ODataRoute("(Id={aId})")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpDelete}
        ;;; <summary>
        ;;; Delete a potluckFulfillment.
        ;;; </summary>
        ;;; <param name="aId">Item id</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method DeletePotluckFulfillment, @IActionResult
            {FromODataUri}
            required in aId, int
        proc
            ;;Get the potluckFulfillment to be deleted
            data potluckFulfillmentToRemove = _DbContext.PotluckFulfillments.Find(aId)

            ;;Did we find it?
            if (potluckFulfillmentToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            _DbContext.PotluckFulfillments.Remove(potluckFulfillmentToRemove)
            _DbContext.SaveChanges()

            mreturn NoContent()

        endmethod
    endclass

endnamespace